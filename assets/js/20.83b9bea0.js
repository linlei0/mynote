(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{450:function(t,s,a){"use strict";a.r(s);var n=a(65),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" []==![]")]),t._v(" "),a("p",[a("strong",[t._v("为什么 []==![]")])]),t._v(" "),a("p",[t._v("我们先来了解 "),a("strong",[t._v("!")]),t._v(" 的定义:")]),t._v(" "),a("p",[a("strong",[t._v("!"),a("strong",[t._v("除了取反也可将变量转换成")]),t._v("boolean")]),t._v(" 类型。"),a("strong",[t._v("null")]),t._v(" 、 "),a("strong",[t._v("undefined")]),t._v(" 、 "),a("strong",[t._v("NaN")]),t._v(" 以及空字符串 "),a("strong",[t._v("''")]),t._v(" 取反都为 true ，其余都为 "),a("strong",[t._v("false")]),t._v(" 。所以 "),a("strong",[t._v("![]")]),t._v(" 运算后的结果就是 "),a("strong",[t._v("false")])]),t._v(" "),a("p",[t._v("根据运算优先级 "),a("strong",[t._v("!")]),t._v(" 的优先级大于 "),a("strong",[t._v("=")]),t._v("，所以首先执行 "),a("strong",[t._v("![]")]),t._v("，此时相当于比较 "),a("strong",[t._v("[]==false")]),t._v("，接下来我们了解相等运算符 "),a("strong",[t._v("==")])]),t._v(" "),a("h2",{attrs:{id:"相等运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等运算符"}},[t._v("#")]),t._v(" 相等运算符==")]),t._v(" "),a("p",[t._v("相等运算符使用"),a("strong",[t._v("抽象相等比较算法")]),t._v("比较两个操作数，大致概括如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果两个操作数都是对象，则仅当两个操作数都引用同一个对象时才返回true")])]),t._v(" "),a("li",[a("p",[t._v("如果一个操作数是null，另一个操作数是undefined，则返回true")])]),t._v(" "),a("li",[a("p",[t._v("如果两个操作数是不同类型的，就会尝试在比较之前将它们转换为相同类型")]),t._v(" "),a("ul",[a("li",[t._v("当数字与字符串进行比较时，会尝试将字符串转换为数字值")]),t._v(" "),a("li",[t._v("如果操作数之一是Boolean，则将布尔操作数转换为1或0\n"),a("ul",[a("li",[t._v("如果是true，则转换为1")]),t._v(" "),a("li",[t._v("如果是 false，则转换为0")])])]),t._v(" "),a("li",[t._v("如果操作数之一是对象，另一个是数字或字符串，会尝试使用对象的valueOf()和toString()方法将对象转换为原始值")])])]),t._v(" "),a("li",[a("p",[t._v("如果操作数具有相同的类型，则将它们进行如下比较")]),t._v(" "),a("ul",[a("li",[t._v("String：true仅当两个操作数具有相同顺序的相同字符时才返回")]),t._v(" "),a("li",[t._v("Number：true仅当两个操作数具有相同的值时才返回。+0并被-0视为相同的值。如果任一操作数为NaN，则返回false")]),t._v(" "),a("li",[t._v("Boolean：true仅当操作数为两个true或两个false时才返回true")])]),t._v(" "),a("p",[t._v("注意"),a("strong",[t._v("如果操作数之一是Boolean，则将布尔操作数转换为1或0")]),t._v("\n现在我们可以知道 "),a("strong",[t._v("[]==false")]),t._v("，其实可以转换成这样：")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也就是")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("p",[t._v("好吧接下来我们看看**Number([])**如何执行的")]),t._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("p",[t._v("Number的转换规则如下：")]),t._v(" "),a("ul",[a("li",[t._v("如果是Boolean值，true和false将分别转换为1和0")]),t._v(" "),a("li",[t._v("如果是数字值，只是简单的传入和返回")]),t._v(" "),a("li",[t._v("如果是null值，返回0")]),t._v(" "),a("li",[t._v("如果是undefined,返回NaN")]),t._v(" "),a("li",[t._v("如果是字符串，遵循下列规则：\n"),a("ul",[a("li",[t._v("如果是字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即“1”变成1，“123”会变成123，而“011”会变成11（前导的零被忽略了）；")]),t._v(" "),a("li",[t._v("如果字符串中包含有效的浮点格式，如“1.1”，则将其转换为对应的浮点数值（同样也会忽略前导零）；")]),t._v(" "),a("li",[t._v('如果字符串中包含有效的十六进制格式，例如"0xf"，则将其他转换为相同大小的十进制整数值')]),t._v(" "),a("li",[t._v("如果字符串是空的（不包含任何字符），则将其转换为0")]),t._v(" "),a("li",[t._v("如果字符串中包含除上述格式之外的字符，则将其他转换成NaN")])])]),t._v(" "),a("li",[t._v("如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN(或者仍然不匹配前五条规则)，则调用的对象的toString()方法，然后再次依照前面的规则转换返回的字符串值")])]),t._v(" "),a("p",[t._v("现在明白了：\n"),a("strong",[t._v("如果是对象，则调用对象的valueOf()方法")]),t._v("，那么我们看看 "),a("strong",[t._v("[].valueOf()")]),t._v(" 返回什么？")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",target:"_blank",rel:"noopener noreferrer"}},[t._v("valueOf"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("[].valueOf()")]),t._v(" 依然返回 "),a("strong",[t._v("[]")]),t._v(",这个时候需要使用"),a("code",[t._v("toString()")])]),t._v(" "),a("p",[t._v("我们再来看看"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",target:"_blank",rel:"noopener noreferrer"}},[t._v("Array.prototype.toString"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\narr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n")])])]),a("p",[t._v("所以"),a("code",[t._v("Number([])")]),t._v("的转换过程如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Numebr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("p",[t._v("所以 "),a("strong",[t._v("[]==![]")])])])}),[],!1,null,null,null);s.default=r.exports}}]);